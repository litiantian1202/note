/*
 *theme: daily report
 *Date: 2016.07.13
 *Author: PJY
 */

Ⅰ.	ReactComponent

		React includes React and ReactDOM

		var ReactDOM = require('react-dom');
		var React = require('react');

		原本的 react package 被拆分为 react 及 react-dom 两个 package。其中 react package 中包含 React.createElement、 .createClass、 .Component， .PropTypes， .Children 这些 API，而 react-dom package 中包含 ReactDOM.render、 .unmountComponentAtNode、 .findDOMNode。

		原本在服务端渲染用的两个 API .renderToString 和 .renderToStaticMarkup 被放在了 		react-dom/server 中。 

Ⅱ.	React support ES6 Classes
		
		class HelloMessage extends React.Component
		instead
		React.createClass...

Ⅲ.	super 表示父类

		构造方法里面的super有个特殊意义,就是调用父类的构造方法,而且,必须放在方法体的第一行

		super可以调用父类的方法.如super.test(); 这个test方法是父类提供的

		意义在于区别:如果你本类也实现了test方法,为了区别,this.test()表示本类,super()表示父类
如果本类没有实现test.则直接使用test()也行. 	

Ⅳ.	React ES6
		
		http://www.cnblogs.com/Mrs-cc/p/4969755.html	

V.	React Refs
		
		React 支持一个非常特殊的属性，你可以附加到任何从 render() 输出的组件中。这个特殊的属性允许你涉及相应的任何从 render() 返回的支持实例。它总是保证成为适当的实例，在任何时候。

		eg.

		<input ref="myInput" />

		this.refs.myInput

		向一个特定的子实例发送消息，Refs 是一个很好的方式，而通过流动式接收 Reactive 的 props 和 state 的方式可能是不方便的。然而，对于你的应用程序中的流动数据来说，refs 应该不是你的首选抽象特性。默认情况下，为用例使用 Reactive 数据流并保存 refs 本来就是无功无过的。

Ⅵ.	React Props
		
		React 里有一个非常常用的模式就是对组件做一层抽象。组件对外公开一个简单的属性（Props）来实现功能，但内部细节可能有非常复杂的实现。

Ⅶ.	Object.keys(obj)--->返回该对象的所有可枚举自身属性的属性名。

Ⅷ.	ejs
		
		<% %> 用于控制流

		<%= %> 用于转义的输出

		<%- %> 用于非转义的输出

		-%> 结束标签用于换行移除模式

		带有 <%_ _%> 的控制流使用空白字符移除模式

Ⅸ.	source map
		
		简单说，Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。

		有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。

Ⅹ.

Ⅺ.

Ⅻ.



