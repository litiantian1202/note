/*
 *theme: daily report
 *Date: 2016.07.08
 *Author: PJY
 */

webpack学习笔记(最基本，后续配合实战):

一、初识webpack
	
	1.	什么是webpack：

		webpack是近期最火的一款模块加载器兼打包工具，它能把各种资源，例如JS（含JSX）、coffee、样式（含less/sass）、图片等都作为模块来使用和处理。

	2.	webpack的优势：

		①	webpack是以commonJS的形式书写脚本的，但对AMD/CMD的支持也很全面，方便旧项目进行代码迁移。
		②	能被模块化的不仅仅是 JS 了。
		③	开发便捷，能替代部分 grunt/gulp 的工作，比如打包、压缩混淆、图片转base64等。
		④	扩展性强，插件机制完善，特别是支持 React 热插拔（见 react-hot-loader ）的功能让人眼前一亮。

二、webpack实战:
	
	1.	配置安装:

		(sudo) npm install webpack -g 	全局安装webpack

		然后在本地项目把webpack依赖加入到package.json:
		npm init---->创建package.json
		npm install webpack --save-dev---->将webpack依赖加入到package.json

		webpack插件安装:
		npm install webpack-dev-server --save-dev

	2.	启动
		webpack

		改变一个文件webpack实时编译:
		webpack --watch

		改变默认的配置文件webpack.config.js为自定义文件:
		webpack --config myfile.js

		每个项目下都必须配置一个webpack.config.js,相当于grunt的Gruntfile.js

	3.	webpack.config.js中的代码如下形式:

		 module.exports = {
		     entry: './src/app.js',
		     output: {
		         path: './bin',
		         filename: 'app.bundle.js'
		     }
		 };

	4.	命令行 ：

		$ webpack --config XXX.js   //使用另一份配置文件（比如webpack.config2.js）来打包
 

		$ webpack --watch   //监听变动并自动打包
		 
		$ webpack -p    //压缩混淆脚本，这个非常非常重要！
		 
		$ webpack -d    //生成map映射文件，告知哪些模块被最终打包到哪里了

三、加载器(Loader)
	
	1.	作用:
		把 ES6, CoffeeScript, TypeScript 等语言编译成JavaScript。

	2.	使用前先安装依赖
		npm install xxx-loader --save-dev

	3.	将ES6编译成ES5【babel-loader】:

		①	安装babel:
			npm install --save-dev babel-core babel-preset-es2015 ----> babel核心文件

			npm install --save-dev babel-loader ---->babel加载器

		②	添加.babelrc文件来配置babel来使用这些presets

			{ "presets": [ "es2015" ] }

		③	配置webpack.config.js:

			module.exports = {
			    entry: './src/app.js',
			    output: {
			        path: './bin',
			        filename: 'app.bundle.js',
			    },
			    module: {
			        loaders: [{
			            test: /\.js$/,
			            exclude: /node_modules/,//排除该文件夹
			            loader: 'babel-loader',
			        }]
			    }
			}

		④	安装要用的jquery和babel-polyfill【使ES2015的api在老版本的浏览器中可用】

			npm install jquery babel-polyfill --save

		⑤	编辑src/app.js:
			import 'babel-polyfill';
			import cats from './cats';
			import $ from 'jquery';

			$('<h1>Cats</h1>').appendTo('body');
			const ul = $('<ul></ul>').appendTo('body');
			for (const cat of cats) {
			    $('<li></li>').text(cat).appendTo(ul);
			}

		⑥	创建index.html:

			touch index.html

			 <!DOCTYPE html>
			 <html>
			     <head>
			         <meta charset="utf-8">
			     </head>
			     <body>
			         <script src="bin/app.bundle.js" charset="utf-8"></script>
			     </body>
			 </html>

		⑦	运行

			webpack

四、module.exports = {}内部参数:

	1.	plugins(插件项):

		①	npm install component-webpack-plugin
			then:
			var ComponentPlugin = require("component-webpack-plugin");

			module.exports = {
			    plugins: [
			        new ComponentPlugin()
			    ]
			}

		②	webpack内部插件:

			var webpack = require("webpack");
			module.exports = {
			    plugins: [
			        new webpack.ResolverPlugin([
			            new webpack.ResolverPlugin.DirectoryDescriptionFilePlugin("bower.json", ["main"])
			        ], ["normal", "loader"])
			    ]
			};

	2.	entry(页面入口文件配置)
		output(对应输出项配置)
		{
		    entry: {
		        page1: "./page1",
		        //支持数组形式，将加载数组中的所有模块，但以最后一个模块作为输出
		        page2: ["./entry1", "./entry2"]
		    },
		    output: {
		        path: "dist/js/page",
		        filename: "[name].bundle.js"
		    }
		}

	3.	module.loaders(告知webpack每一种文件都要用什么加载器来处理):

		module: {
        //加载器配置(-loader可以省略不写，多个loader之间用！连接,?后边是配置信息参数)
        loaders: [
	            //.css 文件使用 style-loader 和 css-loader 来处理
	            { test: /\.css$/, loader: 'style-loader!css-loader' },
	            //.js 文件使用 jsx-loader 来编译处理
	            { test: /\.js$/, loader: 'jsx-loader?harmony' },
	            //.scss 文件使用 style-loader、css-loader 和 sass-loader 来编译处理
	            { test: /\.scss$/, loader: 'style!css!sass?sourceMap'},
	            //图片文件使用 url-loader 来处理，小于8kb的直接转为base64
	            { test: /\.(png|jpg)$/, loader: 'url-loader?limit=8192'}
	        ]
	    }

	4.	resolve:

		resolve: {
	        //查找module的话从这里开始查找
	        root: 'E:/github/flux-example/src', //绝对路径
	        //自动扩展文件后缀名，意味着我们require模块可以省略不写后缀名
	        extensions: ['', '.js', '.json', '.scss'],
	        //模块别名定义，方便后续直接引用别名，无须多写长长的地址
	        alias: {
	            AppStore : 'js/stores/AppStores.js',//后续直接 require('AppStore') 即可
	            ActionType : 'js/actions/ActionType.js',
	            AppAction : 'js/actions/AppAction.js'
	        }
	    }

